// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  username     String   @unique
  email        String   @unique
  passwordHash String?  @map("password_hash") // Nullable for SNS users
  providers    String[] @default([])
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  authorizationCodes          AuthorizationCode[]
  accessTokens                AccessToken[]
  refreshTokens               RefreshToken[]
  extraProfiles               ExtraProfile[]
  passwordResets              PasswordReset[]
  authStates                  AuthState[]
  JWTState                    JWTState[]
  ExternalProviderAccessToken ExternalProviderAccessToken[]
  roles                       Role[]
  PendingMailChangeProcess    PendingEMailChangeProcess[]
  userOtps                    UserOTP[]
  issuedOtps                  UserOTP[]                     @relation("UserOTP_Issuer")

  @@map("users")
}

model PendingEMailChangeProcess {
  id               String   @id @default(cuid())
  userId           String   @map("user_id")
  newEmail         String   @map("new_email")
  verificationCode String   @map("verification_code")
  expiresAt        DateTime @map("expires_at")
  used             Boolean  @default(false)
  createdAt        DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([newEmail])
  @@map("pending_email_change_processes")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  bitmask     Int      @default(0)

  users User[]

  @@map("roles")
}

model AuthorizationCode {
  code                String   @id // ハッシュ化推奨
  clientId            String   @map("client_id")
  userId              String   @map("user_id")
  redirectUri         String   @map("redirect_uri")
  scope               String?
  codeChallenge       String?  @map("code_challenge")
  codeChallengeMethod String?  @map("code_challenge_method")
  expiresAt           DateTime @map("expires_at")
  createdAt           DateTime @default(now()) @map("created_at")

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("authorization_codes")
}

model AccessToken {
  token     String   @id // ステートフルの場合ハッシュ化推奨
  clientId  String   @map("client_id")
  userId    String   @map("user_id")
  scope     String?
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  refreshTokens RefreshToken[]

  @@map("access_tokens")
}

model RefreshToken {
  token       String   @id // ハッシュ化必須
  accessToken String   @map("access_token")
  clientId    String   @map("client_id")
  userId      String   @map("user_id")
  scope       String?
  expiresAt   DateTime @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  accessTokenRef AccessToken @relation(fields: [accessToken], references: [token], onDelete: Cascade)
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

// SNS認証用のプロフィール情報
model ExtraProfile {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  provider    String // "google", "x", etc.
  providerId  String   @map("provider_id")
  displayName String?  @map("display_name")
  email       String?
  avatarUrl   String?  @map("avatar_url")
  rawProfile  Json     @map("raw_profile") // SNS固有のプロフィール情報をJSONで保存
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, provider])
  @@index([userId, provider])
  @@map("extra_profiles")
}

// SNS認証用のステート管理
model AuthState {
  id                  String   @id @default(cuid())
  stateCode           String   @unique @map("state_code")
  oneTimeToken        String   @unique @map("one_time_token")
  provider            String
  callbackUrl         String   @map("callback_url")
  userId              String?  @map("user_id") // 認証完了後にユーザーIDを保存
  codeVerifier        String?  @map("code_verifier") // PKCE code_verifier
  codeChallenge       String?  @map("code_challenge") // PKCE code_challenge
  codeChallengeMethod String?  @map("code_challenge_method") // PKCE method (S256 or plain)
  expiresAt           DateTime @map("expires_at")
  used                Boolean  @default(false)
  createdAt           DateTime @default(now()) @map("created_at")

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([stateCode])
  @@index([oneTimeToken])
  @@index([userId])
  @@map("auth_states")
}

// パスワードリセット用のテーブル
model PasswordReset {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  resetCode String   @unique @map("reset_code") //  ハッシュ化された6桁の確認コード
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([resetCode])
  @@index([userId])
  @@map("password_resets")
}

model JWTState {
  id        String  @id @default(cuid())
  userId    String  @map("user_id")
  revoked   Boolean @default(false)
  tokenHint String  @default("")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Manage external provider access tokens (e.g., for SNS providers)
model ExternalProviderAccessToken {
  id String @id @default(cuid())

  userId         String @map("user_id")
  encryptedToken String @map("encrypted_token")
  provider       String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("external_provider_access_tokens")
}

// GMO Coin (FX) related models
// These models capture external API responses from gmo-coin for ticker, kline, rules and status.
model GmoCoinStatus {
  id           String   @id @default(cuid())
  statusCode   Int      @map("status")
  data         Json
  responsetime DateTime @map("responsetime")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("gmo_coin_statuses")
}

model GmoCoinTickerItem {
  id        String   @id @default(cuid())
  symbol    String
  ask       String
  bid       String
  timestamp DateTime
  status    String

  // relation back to parent ticker response
  tickerId String        @map("ticker_id")
  ticker   GmoCoinTicker @relation("Ticker_Items", fields: [tickerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("gmo_coin_ticker_items")
}

model GmoCoinTicker {
  id           String              @id @default(cuid())
  statusCode   Int                 @map("status")
  responsetime DateTime            @map("responsetime")
  data         GmoCoinTickerItem[] @relation("Ticker_Items")
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  @@map("gmo_coin_tickers")
}

model GmoCoinKlineItem {
  id       String   @id @default(cuid())
  openTime DateTime
  open     String
  high     String
  low      String
  close    String

  // relation back to parent kline response
  klineId String       @map("kline_id")
  kline   GmoCoinKline @relation("Kline_Items", fields: [klineId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("gmo_coin_kline_items")
}

model GmoCoinKline {
  id           String             @id @default(cuid())
  statusCode   Int                @map("status")
  responsetime DateTime           @map("responsetime")
  data         GmoCoinKlineItem[] @relation("Kline_Items")
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  @@map("gmo_coin_klines")
}

model GmoCoinSymbolRule {
  id               String @id @default(cuid())
  symbol           String
  tickSize         String
  minOpenOrderSize String
  maxOrderSize     String
  sizeStep         String

  // relation back to parent rules response
  rulesId String       @map("rules_id")
  rules   GmoCoinRules @relation("Rules_Items", fields: [rulesId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("gmo_coin_symbol_rules")
}

model GmoCoinRules {
  id           String              @id @default(cuid())
  statusCode   Int                 @map("status")
  responsetime DateTime            @map("responsetime")
  data         GmoCoinSymbolRule[] @relation("Rules_Items")
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  @@map("gmo_coin_rules")
}

// End of gmo-coin related models

// TOTP / OTP related models
// `secret` is expected to be encrypted using AES-256-GCM and stored as base64 string.
model UserOTP {
  id                  String    @id @default(cuid())
  secret              String    @map("secret_encrypted") // AES-256-GCM, base64
  issuedAt            DateTime  @default(now()) @map("issued_at")
  lastAuthenticatedAt DateTime? @map("last_authenticated_at")
  issuerId            String    @map("issuer_id")
  userId              String    @map("user_id")
  setupCompleted      Boolean   @default(false) @map("setup_completed")

  // Relations
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  issuer      User            @relation("UserOTP_Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  backupCodes OTPBackupCode[] @relation("OTP_BackupCodes")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId])
  @@index([userId])
  @@index([issuerId])
  @@map("user_otp")
}

model OTPBackupCode {
  id         String   @id @default(cuid())
  hashedCode String   @map("hashed_code")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relation to parent UserOTP
  userOtpId String  @map("user_otp_id")
  userOtp   UserOTP @relation("OTP_BackupCodes", fields: [userOtpId], references: [id], onDelete: Cascade)

  @@index([userOtpId])
  @@map("otp_backup_codes")
}
